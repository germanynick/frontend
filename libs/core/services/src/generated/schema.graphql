"""Autogenerated return type of ActiveClient"""
type ActiveClientPayload {
  success: Boolean
}

type ActiveJobs {
  completedJobs: [Job!]
  currentJobs: [Job!]
  nextJobs: [Job!]
}

type ActiveWorkerAssignments {
  completed: [WorkerAssignment!]
  current: [WorkerAssignment!]
  next: [WorkerAssignment!]
}

type AdminReminder {
  company: Company
  content: String
  createdAt: ISO8601DateTime
  employer: Company
  id: String
  reminderChannels: JSON
  reminderType: String
  title: String
  updatedAt: ISO8601DateTime
}

enum AdminReminderTypeEnum {
  """Profile"""
  profile

  """Subscription"""
  subscription
}

"""Autogenerated return type of AdminSendPasswordResetWorker"""
type AdminSendPasswordResetWorkerPayload {
  success: Boolean
}

type AppInit {
  chatIntegrationSetting: ChatIntegrationSetting
  company: Company
  companyConfig: CompanyConfig
  companyReferencesData: CompanyReferencesData
  masterData: JSON
  worker: Worker
  workerOnboarding: WorkerOnboarding
}

type AppWalkthrough {
  completed: Boolean
  components: [WalkthroughComponent!]
  id: String!
  name: String!
  webUrl: String!
}

type ApplicantTimeOff {
  endDate: ISO8601Date
  id: String!
  startDate: ISO8601Date
}

input ApplicantTimeOffArgument {
  endDate: ISO8601Date
  startDate: ISO8601Date
}

"""A valid big decimal as a string"""
scalar BigDecimal

type BillingInvoice {
  amountDue: Float
  amountPaid: Float
  client: Client
  createdAt: ISO8601DateTime
  description: String
  externalId: Boolean
  id: String
  invoicePdf: String
  number: String
  paidAt: ISO8601DateTime
  rawData: JSON
  status: String
}

"""The connection type for BillingInvoice."""
type BillingInvoiceConnection {
  """A list of edges."""
  edges: [BillingInvoiceEdge]

  """A list of nodes."""
  nodes: [BillingInvoice]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type BillingInvoiceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BillingInvoice
}

type BillingPlan {
  active: Boolean
  billingPrices: [BillingPrice!]
  description: String
  id: String
  imageUrl: String
  isFree: Boolean
  name: String
}

type BillingPrice {
  active: Boolean
  amount: Float
  currency: String
  id: String
  interval: String
  intervalCount: Int
  isDefault: Boolean
}

type BillingSubscription {
  client: Client
  description: String
  id: String
  latestInvoice: BillingInvoice
  latestPaymentStatus: String
  nextPaymentAt: ISO8601Date
  paymentMethodType: String
  status: String
}

"""The connection type for BillingSubscription."""
type BillingSubscriptionConnection {
  """A list of edges."""
  edges: [BillingSubscriptionEdge]

  """A list of nodes."""
  nodes: [BillingSubscription]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type BillingSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: BillingSubscription
}

"""Blocked client"""
type BlockedClient {
  clients: [Client!]
  note: String
}

"""Blocked Worker Type"""
type BlockedWorker {
  blockedByClients: [Client!]
  blockedByCompany: Boolean
  note: String
}

enum BookmarkActionEnum {
  """Candidate bookmark a `job`"""
  bookmark

  """Candidate removes `job` from bookmarks"""
  unbookmark
}

input BookmarkJobArgument {
  action: BookmarkActionEnum!
  jobId: String!
}

type Bulletin {
  active: Boolean
  allowDismiss: Boolean
  companyId: String
  content: String
  createdAt: String
  data: JSON
  expiredAt: String
  id: String
  isDismissed: Boolean
  kind: String
  mediaUrl: String
  name: String
  scope: String
  targetedClass: String
  title: String
}

"""Autogenerated return type of ChangePasswordEmployer"""
type ChangePasswordEmployerPayload {
  success: Boolean
}

"""Autogenerated return type of ChangePasswordForUser"""
type ChangePasswordForUserPayload {
  success: Boolean
}

type ChatIntegrationSetting {
  active: Boolean
  configuration: JSON
  provider: String
}

type CityMaster {
  countryCode: String
  countryId: Int
  id: String!
  latitude: String
  longitude: String
  name: String
  stateCode: String
  stateId: Int
}

type Client {
  address1: String
  address2: String
  billingPlan: BillingPlan
  city: String
  contactEmail: String
  contactFirstName: String
  contactLastName: String
  contactName: String
  contactPhone: String
  country: String
  description: String
  ein: String
  id: String!
  image: File
  latitude: String
  longitude: String
  name: String
  phone: String
  state: String
  status: String
  taxId: String
  url: String
  verifiedAt: ISO8601Date
  verifiedBy: Employer
  verifyStatus: String
  zipCode: String
}

input ClientArgument {
  address1: String
  address2: String
  city: String
  contactEmail: String
  contactFirstName: String
  contactLastName: String
  contactPhone: String
  country: String
  description: String
  ein: String

  """Signed blob ID generated via `createDirectUpload` mutation"""
  imageSignedBlobId: String
  latitude: BigDecimal
  longitude: BigDecimal
  name: String!
  phone: String
  source: SignupSourceEnum = opus_web_portal
  state: String
  taxId: String
  url: String
  zipCode: String
}

"""The connection type for Client."""
type ClientConnection {
  """A list of edges."""
  edges: [ClientEdge]

  """A list of nodes."""
  nodes: [Client]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ClientEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Client
}

type Company {
  address: String
  addressState: String
  city: String
  companyConfig: CompanyConfig
  country: String
  description: String
  id: String!
  logoUrl: String!
  mainContactEmail: String
  mainContactName: String
  name: String
  phone: String
  workers: [Worker!]
  zip: String
}

type CompanyConfig {
  adpUrl: String
  benefitUrls: JSON
  companyId: String
  contactSupportUrl: String
  defaultLocationImageMobileUrl: String
  defaultLocationImageThumbnailUrl: String
  defaultLocationImageWebUrl: String
  distanceUnit: String
  enableClickTracking: Boolean
  enableScreenTracking: Boolean
  facebookUrl: String
  faqsUrl: String
  id: String!
  instagramUrl: String
  linkedInUrl: String
  linkedinRedirectUrl: String
  livechatIntegration: LivechatIntegration
  messagingServiceSender: String
  mobileOpusPolicies: String
  oneSignalAppId: String
  privacyPoblicyUrl: String
  privacyPolicyContent: String
  referalRewardContent: String
  reportBugsUrl: String
  termUrl: String
  twitterUrl: String
  usingModules: [String!]
  webOpusPolicies: String
  webPortalUrl: String
  workerTermsOfService: TermsOfService
  youtubeUrl: String
}

"""Company management filters"""
input CompanyManagementFilter {
  clientId: String
  ids: [String!]
}

type CompanyOnboarding {
  companyId: String!
  description: String!
  id: String!
  name: String!
  onboardingPartsNumber: Int!
  referenceUrl: String
}

type CompanyReferencesData {
  cities(stateCode: String!): [CityMaster!]!
  states(countryCode: String!): [StateMaster!]!
}

type ContactForm {
  client: Client
  company: Company
  contactType: String
  createdAt: ISO8601DateTime
  description: String
  email: String
  fullName: String
  id: String
  images: [File!]
  ownerId: String
  ownerType: String
  phone: String
  source: String
  status: String
  subject: String
}

"""The connection type for ContactForm."""
type ContactFormConnection {
  """A list of edges."""
  edges: [ContactFormEdge]

  """A list of nodes."""
  nodes: [ContactForm]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ContactFormEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ContactForm
}

enum ContactTypeEnum {
  """Contact"""
  contact

  """Feedback"""
  feedback
}

"""Autogenerated return type of CreateIntegrationWorker"""
type CreateIntegrationWorkerPayload {
  authToken: String!
  notificationChannel: String
  worker: Worker!
}

"""Autogenerated return type of CreateMessage"""
type CreateMessagePayload {
  message: Message!
  messageThread: MessageThread!
}

"""Autogenerated return type of CreateReferredTraveler"""
type CreateReferredTravelerPayload {
  success: Boolean
}

"""Autogenerated return type of DeactiveClient"""
type DeactiveClientPayload {
  success: Boolean
}

"""Autogenerated return type of DestroyDraftJob"""
type DestroyDraftJobPayload {
  success: Boolean!
}

"""Autogenerated return type of DestroyFile"""
type DestroyFilePayload {
  id: String
  success: Boolean
}

"""Autogenerated return type of DestroyJobTemplate"""
type DestroyJobTemplatePayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyMultipleFiles"""
type DestroyMultipleFilesPayload {
  ids: [String!]
  success: Boolean
}

"""Autogenerated return type of DestroySavedFilter"""
type DestroySavedFilterPayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkExperience"""
type DestroyWorkExperiencePayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkedShift"""
type DestroyWorkedShiftPayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkerCertification"""
type DestroyWorkerCertificationPayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkerEducation"""
type DestroyWorkerEducationPayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkerExpense"""
type DestroyWorkerExpensePayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkerReference"""
type DestroyWorkerReferencePayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of DestroyWorkerSpecialty"""
type DestroyWorkerSpecialtyPayload {
  id: String!
  success: Boolean!
}

input DirectOfferArgument {
  address: String
  address2: String
  city: String
  country: String
  discipline: String
  duration: Int
  durationType: String
  frequency: String
  jobTitle: String
  latitude: BigDecimal
  longitude: BigDecimal
  minPayAmount: Float
  payAmount: Float
  shifts: [String!]
  specialty: String
  startDate: ISO8601DateTime
  state: String
  zipcode: String
}

"""Represents direct upload credentials"""
type DirectUpload {
  """Created blob record ID"""
  blobId: ID!

  """HTTP request headers (JSON-encoded)"""
  headers: String!

  """Pre signed url of record: Using after direct upload file to service"""
  preSignedUrl: String

  """Created blob record signed ID"""
  signedBlobId: ID!

  """Upload URL"""
  url: String!
}

"""Autogenerated return type of Disconnect"""
type DisconnectPayload {
  success: Boolean
}

"""Autogenerated return type of DismissBulletin"""
type DismissBulletinPayload {
  bulletinId: String!
  success: Boolean!
}

type Draft {
  clientId: String
  data: DraftObject
  id: String
}

"""The connection type for Draft."""
type DraftConnection {
  """A list of edges."""
  edges: [DraftEdge]

  """A list of nodes."""
  nodes: [Draft]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type DraftEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Draft
}

type DraftJob {
  address: String
  address2: String
  benefitContent: String
  city: String
  client: Client
  complianceRequirements: [String!]
  country: String
  createdAt: ISO8601DateTime
  createdDate: ISO8601DateTime
  customStartDate: String
  description: String
  discipline: String
  draftId: String
  duration: Int
  employerOfRecord: [String!]
  exclusiveJob: Boolean
  externalCreatedAt: ISO8601Date
  externalJobId: String
  externalUpdatedAt: ISO8601Date
  facilityType: String
  frequency: String
  hospital: String
  hoursPerWeek: Int
  id: String
  isAsap: Boolean
  isSkillChecklist: String
  jobInvitations: [JobInvitation!]
  jobType: String
  location: Location
  minExpYear: Int
  minWeeklyPayAmount: Float
  profileRequirements: [String!]
  publishedAt: ISO8601DateTime
  requirementNotes: String
  scope: String
  shifts: [String!]
  skillId: Int
  skillLongName: String
  skillName: String
  slotsNumber: Int
  slug: String
  specialty: [String!]
  startDate: ISO8601Date
  state: String
  status: String
  templateName: String
  title: String
  updatedAt: ISO8601DateTime
  viewCount: Int
  weeklyPayAmount: Float
  zipcode: String
}

"""Draft object"""
union DraftObject = Job

type EmergencyContact {
  contactName: String
  contactPhone: String
  contactRelationship: String
  id: String!
  workerId: String
}

input EmergencyContactArgument {
  contactName: String
  contactPhone: String
  contactRelationship: String
  id: String
}

type Employer {
  agreedToTerms: Boolean
  avatar: File
  changePasswordRequired: Boolean
  client: Client
  company: Company
  email: String
  firstName: String
  id: String!
  intervieweesNumber: Int
  lastName: String
  lastSignInAt: ISO8601DateTime
  paymentMethod: String
  permittedEvents: [String!]
  phone: String
  scope: String
  scopesAreAllowedToUpdate: JSON
  status: String!
  title: String
  totalUnreadMessage: Int
}

type EmployerAppInit {
  company: Company
  dashboard: EmployerDashboard
  employer: Employer
  totalUnreadNotification: Int
}

input EmployerArgument {
  agreedToTerms: Boolean
  avatarSignedBlobId: String
  email: String
  firstName: String
  lastName: String
  password: String
  passwordConfirmation: String
  paymentMethod: String
  phone: String
  scope: EmployerScopeEnum
  source: SignupSourceEnum = opus_web_portal
  title: String
}

"""The connection type for Employer."""
type EmployerConnection {
  """A list of edges."""
  edges: [EmployerEdge]

  """A list of nodes."""
  nodes: [Employer]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Get Employer Dashboard"""
type EmployerDashboard {
  dateRanges: JSON
  totalClients: Int
  totalOnboardingSubmissions: [JSON!]
  totalPositionsOpen: Int
  totalWorkersPerClient: [JSON!]
  totalWorkersWorking: Int
}

"""An edge in a connection."""
type EmployerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Employer
}

enum EmployerScopeEnum {
  """Admin"""
  admin

  """Interviewer"""
  interviewer

  """Manager"""
  manager
}

enum EmployerStatusEnum {
  """Active"""
  active

  """Inactive"""
  inactive
}

"""Get Employer Summary"""
type EmployerSummary {
  clients: EmployerSummaryClients
  dateRanges: JSON
  employer: Employer!
  jobApplicants(filter: EmployerSummaryFilters = null, limit: Int = 10, offset: Int = 0): EmployerSummaryJobApplicants
  jobs: EmployerSummaryJobs
  onboardingSubmissions(filter: EmployerSummaryFilters!): [JSON!]
  reports(filter: EmployerSummaryFilters = {keywordSearch: "*", locationId: null, timePeriod: weekly}): EmployerSummaryReports
  workers: EmployerSummaryWorkers
}

"""Employer summary client"""
type EmployerSummaryClients {
  activeClientCount: Int
  newClientsCount: Int
}

"""Employer Dashboard Filter"""
input EmployerSummaryFilters {
  keywordSearch: String = "*"
  locationId: String = null
  timePeriod: TimePeriodEnum = weekly
}

"""Employer summary job submissions"""
type EmployerSummaryJobApplicants {
  activeJobApplicants: [JobApplicant!]
  activeJobApplicantsCount: Int
  newJobApplicantsCount: Int
}

"""Employer summary job"""
type EmployerSummaryJobs {
  fillRate: Int
  newJobsCount: Int
  recentJobs: [Job!]
}

"""Employer summary reports"""
type EmployerSummaryReports {
  jobApplicants: [JSON!]
  jobApplicantsCompletedCount: Int
  jobsAvailableCount: Int
  jobsCompletedCount: Int
  totalFacilityLocationsCount: Int
  totalJobApplicantsCount: Int
}

"""Employer summary workers"""
type EmployerSummaryWorkers {
  activeWorkersCount: Int
  directHiredCount: Int
  newWorkersCount: Int
  normalInterviewCount: Int
  recentNewWorkers: [Worker!]
}

type ExportFile {
  companyId: String
  fileType: String
  fileUrl: String
  id: String
  status: String
}

type ExtendAssignment {
  applicantTimeOffs: [ApplicantTimeOff!]
  id: String!
  note: String
  timeOffEndDate: ISO8601Date
  timeOffStartDate: ISO8601Date
}

enum FavoriteActionEnum {
  """Candidate favorite a `job`"""
  favorite

  """Candidate removes `job` from favorites"""
  unfavorite
}

type File {
  blobId: String
  contentType: String
  fileUrl: String
  filename: String
  id: String
  imageUrls(
    """For example: 100x100, 200x200"""
    size: [String!]!
  ): JSON

  """deprecated"""
  thumbnails: JSON
}

input FileArgument {
  data: String
  id: String
}

"""The connection type for File."""
type FileConnection {
  """A list of edges."""
  edges: [FileEdge]

  """A list of nodes."""
  nodes: [File]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type FileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: File
}

type FilterCondition {
  company: Company
  companyId: String
  disciplines: JSON
  exclusiveJob: Boolean
  externalId: String
  facilityTypes: JSON
  id: String!
  jobTypes: JSON
  locationCities: JSON
  locationStates: JSON
  maxWage: Float
  minMatchingPercentage: Float
  minWage: Float
  nearBy: JSON
  savedFilter: SavedFilter
  shifts: JSON
  specialties: JSON
  startDate: JSON
  worker: Worker
  workerId: String
}

type GroupOnboardingPart {
  company: Company!
  id: String!
  state: String!
  worker: Worker!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type ImportBatch {
  company: Company!
  employer: Employer!
  id: String!
  objectType: String
  results: JSON
  status: String
}

enum ImportBatchObjectEnum {
  """Mass import employers"""
  Employer

  """Mass import jobs"""
  Job
}

type ImportTemplateFile {
  fileUrl: String
}

type Interview {
  address1: String
  address2: String
  city: String
  client: Client
  company: Company
  createdAt: ISO8601DateTime
  description: String
  employerNote: String
  id: String!
  interviewEndTime: ISO8601DateTime
  interviewLink: String
  interviewStartTime: ISO8601DateTime
  interviewType: String
  interviewers: [Interviewer!]
  job: Job
  jobApplicant: JobApplicant
  note: String
  state: String
  status: String
  statusName: String
  statusUpdatedAt: ISO8601DateTime
  timezone: String
  title: String
  updateEvents: [JSON!]
  updatedAt: ISO8601DateTime
  worker: Worker
  zipCode: String
}

enum InterviewTypeEnum {
  """Offline"""
  offline

  """Online"""
  online
}

type InterviewWithPagination {
  interviews: [Interview!]
  totalCount: Int
}

type Interviewer {
  client: Client
  company: Company
  createdAt: ISO8601DateTime
  employer: Employer
  id: String!
  interview: Interview
  status: String
  updatedAt: ISO8601DateTime
}

input InterviewerArgument {
  _destroy: Boolean
  employerId: String!
  id: String
}

"""Represents untyped JSON"""
scalar JSON

type Job {
  address: String
  address2: String
  applicantCount: Int
  benefitContent: String
  canApply: Boolean
  city: String
  client: Client
  complianceRequirements: [String!]
  country: String
  createdAt: ISO8601DateTime
  createdDate: ISO8601DateTime
  customStartDate: String
  description: String
  discipline: String
  distance: Float

  """
  The distance in miles for the location to the current user's search location
  """
  distanceToCurrentUserSearchLocation: Float
  draftId: String
  duration: Int
  durationType: String
  employerOfRecord: String
  exclusiveJob: Boolean
  externalCreatedAt: ISO8601Date
  externalJobId: String
  externalUpdatedAt: ISO8601Date
  facilityType: String
  favoriteCount: Int
  frequency: String
  hospital: String
  hoursPerWeek: Int
  id: String
  images: [String!]
  isAsap: Boolean
  isBookmarked: Boolean
  isDisliked: Boolean
  isFavorited: Boolean
  isLiked: Boolean
  isSkillChecklist: String
  jobApplicant: JobApplicant
  jobApplicants: [JobApplicant!]
  jobInvitations: [JobInvitation!]
  jobType: String
  latitude: Float
  location: Location
  locationImage: LocationImage
  longitude: Float
  matchingPercentage: Float
  minExpYear: Int
  minWeeklyPayAmount: Float
  noTalentMatches: Int
  profileRequirements: [String!]
  publishedAt: ISO8601DateTime
  requirementNotes: String
  shifts: [String!]
  skillId: Int
  skillLongName: String
  skillName: String
  slotsNumber: Int
  slug: String
  specialty: [String!]
  startDate: ISO8601Date
  state: String
  status: String
  templateName: String
  title: String
  topWorkerMatchingScores: JSON
  updatedAt: ISO8601DateTime
  viewCount: Int
  weeklyPayAmount: Float
  zipcode: String
}

type JobApplicant {
  address: String
  address2: String
  applicantTimeOffs: [ApplicantTimeOff!]

  """format {code, title, state: pending/started/completed}"""
  applicationProcess: JSON
  applyDate: ISO8601DateTime
  city: String
  client: Client
  country: String
  createdAt: ISO8601DateTime
  currentWorkerAssignment: WorkerAssignment
  discipline: String
  duration: Int
  durationType: String
  employerNote: String
  frequency: String
  id: String
  interview: Interview
  isDirectOffer: Boolean
  job: Job
  jobApplicantActivities: [JobApplicantActivity!]
  jobTitle: String
  latitude: BigDecimal
  longitude: BigDecimal
  minPayAmount: Float
  note: String
  offerDate: ISO8601DateTime
  payAmount: Float
  shifts: [String!]
  source: String
  specialty: String
  startDate: ISO8601DateTime
  startedStatus: String
  startedStatusName: String
  state: String
  status: String
  statusName: String
  statusUpdatedAt: ISO8601DateTime
  submittal: Submittal
  timeOffEndDate: ISO8601Date
  timeOffStartDate: ISO8601Date
  updateEvents: [JSON!]
  updatedAt: ISO8601DateTime
  worker: Worker
  workerAssignments: WorkerAssignment
  zipcode: String
}

type JobApplicantActivity {
  createdAt: ISO8601DateTime
  id: String
  jobApplicant: JobApplicant
  owner: JSON
  statusChanged: String
  updatedAt: ISO8601DateTime
}

"""The connection type for JobApplicant."""
type JobApplicantConnection {
  """A list of edges."""
  edges: [JobApplicantEdge]

  """A list of nodes."""
  nodes: [JobApplicant]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JobApplicantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JobApplicant
}

"""Filter job applicants"""
input JobApplicantFilter {
  applyDate: StartDateSearch
  interviewerId: String
  keyword: String
  statuses: [String!]
  submissionScope: SubmissionScopeEnum = default
}

"""Job applicant management sorting"""
input JobApplicantManagementSort {
  field: JobApplicantManagementSortEnum!
  order: SortOrder!
}

enum JobApplicantManagementSortEnum {
  """By created date"""
  NEWEST
}

enum JobApplicantSourceEnum {
  """Opus Mobile App"""
  opus_mobile_app

  """Opus Web Portal"""
  opus_web_portal
}

enum JobApplicantStatusEnum {
  """Candidate Applied"""
  apply

  """Candidate Interested"""
  interest
}

type JobApplicantWithPagination {
  jobApplicants: [JobApplicant!]
  totalCount: Int
}

"""The connection type for Job."""
type JobConnection {
  """A list of edges."""
  edges: [JobEdge]

  """A list of nodes."""
  nodes: [Job]
  pageInfo: PageInfo!
  totalCount: Int!
}

type JobDetailPopularCity {
  avgWeeklyRate: Float
  city: String
  rankedJobs: [RankedJob!]!
  state: String
  totalJobs: Int
}

"""The connection type for JobDetailPopularCity."""
type JobDetailPopularCityConnection {
  """A list of edges."""
  edges: [JobDetailPopularCityEdge]

  """A list of nodes."""
  nodes: [JobDetailPopularCity]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JobDetailPopularCityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JobDetailPopularCity
}

type JobDiscovers {
  available: Int
  bookmarkedJobs: Int
  favoritedJobs: Int
  lastSearch: JobLastSearch
  lastViewedJobs: Int
  recommend: Int
  trending: Int
}

"""An edge in a connection."""
type JobEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Job
}

enum JobEmployerOfRecordEnum {
  """TherapyJobs would manage EOM"""
  company_manage_eom

  """Manage own EOM"""
  manage_own_eom
}

"""Filter jobs"""
input JobFilter {
  disciplines: [String!]
  exclusiveJob: Boolean
  externalId: String
  facilityTypes: [String!]
  jobIds: [String!]

  """talent_matches"""
  jobScope: JobScopeEnum
  jobTypes: [String!]
  keyword: String
  locationCities: [String!]
  locationStates: [String!]
  maxWage: Float
  minMatchingPercentage: Int
  minWage: Float
  nearBy: NearByJobSearch
  postedInDays: Int
  shifts: [String!]
  specialties: [String!]
  startDate: StartDateSearch
  status: JobStatusEnum
}

type JobInvitation {
  createdAt: ISO8601DateTime
  id: String
  job: Job
  updatedAt: ISO8601DateTime
  worker: Worker
}

input JobInvitationArgument {
  _destroy: Boolean
  id: String
  workerId: String!
}

type JobLastSearch {
  count: Int
  filterConditions: JSON
  type: String
}

"""Job management sorting"""
input JobManagementSort {
  field: JobManagementSortEnum!
  order: SortOrder!
}

enum JobManagementSortEnum {
  """By distance"""
  DISTANCE

  """By created date"""
  NEWEST

  """By weekly pay amount"""
  PAY

  """By matching score"""
  SCORE

  """By start date"""
  START_DATE
}

type JobMatchingWithImage {
  availableJobs: Int
  avgWeeklyRate: Float
  city: String
  cityImage: String
  highWeeklyRate: Float
  locationImage: LocationImage
  lowWeeklyRate: Float
  state: String
  totalJobs: Int
}

enum JobRecommendTypeEnum {
  """Recommed by system"""
  auto

  """Recommed by employer"""
  by_employer
}

enum JobScopeEnum {
  """Talent Matches page"""
  talent_matches
}

type JobSearchSummary {
  disciplines: JSON
}

enum JobStatusEnum {
  closed
  completed
  open
}

type JobTemplate {
  clientId: String!
  companyId: String!
  data: Job!
  id: String
  templateName: String!
}

"""The connection type for JobTemplate."""
type JobTemplateConnection {
  """A list of edges."""
  edges: [JobTemplateEdge]

  """A list of nodes."""
  nodes: [JobTemplate]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JobTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JobTemplate
}

type JobWithPagination {
  jobs: [Job!]
  summary: JobSearchSummary
  totalCount: Int
}

enum LikeActionEnum {
  """Candidate dislike a `job`"""
  dislike

  """Candidate like a `job`"""
  like

  """Candidate undislike a `job`"""
  undislike

  """Candidate unlike a `job`"""
  unlike
}

input LikeJobArgument {
  action: LikeActionEnum!
  jobId: String!
}

type LivechatIntegration {
  accountId: String
}

type Location {
  active: Boolean
  address: String
  addressState: String
  city: String
  client: Client
  clientId: String!
  companyId: String!
  country: String

  """
  The distance in miles for the location to the current user's search location
  """
  distanceToCurrentUserSearchLocation: Float
  id: String!
  latitude: Float
  longitude: Float
  name: String
  phone: String
  region: String
  statusUpdatedAt: ISO8601DateTime
  statusUpdater: Employer
  zipcode: String
}

enum LocationActiveEnum {
  """Active location"""
  active

  """Inactive location"""
  inactive
}

input LocationArgument {
  address: String
  addressState: String
  city: String
  clientId: String
  country: String
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  phone: String
  zipcode: String
}

"""The connection type for Location."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]

  """A list of nodes."""
  nodes: [Location]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Location
}

type LocationImage {
  city: String
  id: String
  mobileImage: File
  state: String
  thumbnailImage: File
  webImage: File
}

"""Autogenerated return type of MarkAllMessagesAsRead"""
type MarkAllMessagesAsReadPayload {
  success: Boolean
}

"""Autogenerated return type of MarkAllStatus"""
type MarkAllStatusPayload {
  success: Boolean
}

"""Autogenerated return type of MarkStatus"""
type MarkStatusPayload {
  success: Boolean
}

"""In-app message used as chat"""
type Message {
  attachment: File
  createdAt: String
  id: String!
  message: String
  messageThread: MessageThread
  objectId: String
  objectType: String
  receiver: User
  sender: User
  status: String!
}

"""Filter messages"""
input MessageFilter {
  messageThreadId: String!
}

enum MessageObjectTypeEnum {
  """Object is JobApplicant"""
  JobApplicant
}

enum MessageReceiverTypeEnum {
  """Receiver is Employer"""
  Employer

  """Receiver is Worker"""
  Worker
}

"""In-app message thread for worker/facility/facility group/company"""
type MessageThread {
  client: Client
  clientId: String
  company: Company
  companyId: String
  id: String!
  lastMessage: String
  lastTenMessages: [Message!]
  lastTimestamp: String
  objectId: String
  objectType: String
  threadIconUrl: String
  unreadMessageCounter: Int
  worker: Worker
}

type Mutation {
  activeClient(id: String!): ActiveClientPayload
  activeLocation(id: String!): Location
  addPaymentMethod(clientId: String, stripeToken: String!): PaymentMethod
  adminCreateOrUpdateWorkerBlock(workerBlocksAttributes: [WorkerBlockArgument!]!, workerId: String!): [WorkerBlock!]
  adminSendAdminReminders(
    additionalData: JSON
    content: String!
    objectIds: [String!]!

    """
    Should be email / notification / sms. Currently support email only. By default don't need send to BE.
    """
    reminderChannels: JSON

    """Be default BE will set as currrent time."""
    reminderTime: ISO8601DateTime
    reminderType: AdminReminderTypeEnum = subscription
    title: String!
  ): [AdminReminder!]
  adminSendPasswordResetWorker(id: String!): AdminSendPasswordResetWorkerPayload
  adminUpdateWorkerOnboardingPart(id: String!, integrationAttributes: JSON, workerId: String!): WorkerOnboardingPart
  adminUploadDocumentsWorker(id: String!, supportDocumentsAttributes: [SupportDocumentArgument!]): Worker
  bookmarkAJob(action: BookmarkActionEnum!, jobId: String!): Job
  cancelWorkerOnboarding(id: String!): WorkerOnboarding
  cancelWorkerOnboardingPart(id: String!): WorkerOnboardingPart
  changePasswordEmployer(oldPassword: String!, password: String, passwordConfirmation: String): ChangePasswordEmployerPayload
  changePasswordForUser(oldPassword: String!, password: String!, passwordConfirmation: String!): ChangePasswordForUserPayload
  changeStatusEmployer(id: String!, status: EmployerStatusEnum!): Employer
  closeJob(id: String!): Job
  createClient(
    address1: String
    address2: String
    city: String
    contactEmail: String
    contactFirstName: String
    contactLastName: String
    contactPhone: String
    country: String
    description: String
    ein: String

    """Signed blob ID generated via `createDirectUpload` mutation"""
    imageSignedBlobId: String
    latitude: BigDecimal
    locationsAttributes: [LocationArgument!]
    longitude: BigDecimal
    name: String!
    ownerAttributes: EmployerArgument
    phone: String
    source: SignupSourceEnum = opus_web_portal
    state: String
    taxId: String
    url: String
    zipCode: String
  ): Client
  createCompanyOnboarding(description: String!, name: String!, referenceUrl: String): CompanyOnboarding

  """File information required to prepare a direct upload"""
  createDirectUpload(
    """File size (bytes)"""
    byteSize: Int!

    """MD5 file checksum as base64"""
    checksum: String!

    """File content type"""
    contentType: String!

    """Original file name"""
    filename: String!
  ): DirectUpload
  createDraftJob(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, title: String, weeklyPayAmount: Float, zipcode: String): DraftJob
  createEmployer(agreedToTerms: Boolean, avatarSignedBlobId: String, clientId: String, email: String, firstName: String, lastName: String, password: String, passwordConfirmation: String, paymentMethod: String, phone: String, scope: EmployerScopeEnum, source: SignupSourceEnum = opus_web_portal, title: String): Employer
  createExtendAssignment(applicantTimeOffs: [ApplicantTimeOffArgument!], note: String, workerAssignmentId: String!): ExtendAssignment
  createFeedbackContactForm(contactType: ContactTypeEnum!, description: String, email: String, fullName: String, imagesSignedBlobIds: [String!], phone: String, subject: String): ContactForm
  createImportBatch(clientId: String, fileSignedBlobId: String!, objectType: ImportBatchObjectEnum!): ImportBatch
  createIntegrationWorker(email: String!, employmentType: String, externalJobId: String, facilityTypes: String, firstName: String!, lastName: String!, password: String!, passwordConfirmation: String!, phone: String!, recaptchaToken: String, referrerCode: String, socialAuthenticationId: String, source: SignupSourceEnum = opus_web_portal, workerSpecialtiesAttributes: [WorkerSpecialtyArgument!], workingPreferredLocationsAttributes: [WorkingPreferredLocationArgument!]): CreateIntegrationWorkerPayload
  createInterview(address1: String, address2: String, city: String, clientId: String, description: String, employerNote: String, interviewEndTime: ISO8601DateTime!, interviewLink: String, interviewStartTime: ISO8601DateTime!, interviewType: InterviewTypeEnum = online, interviewersAttributes: [InterviewerArgument!]!, jobApplicantId: String, jobId: String, source: JobApplicantSourceEnum = opus_web_portal, state: String, timezone: String!, title: String!, workerId: String!, zipCode: String): Interview
  createJob(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, title: String, weeklyPayAmount: Float, zipcode: String): Job
  createJobApplicant(applicantTimeOffs: [ApplicantTimeOffArgument!], jobId: String!, note: String, source: JobApplicantSourceEnum = opus_mobile_app): JobApplicant
  createJobTemplate(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, templateName: String!, title: String, weeklyPayAmount: Float, zipcode: String): JobTemplate
  createLocation(address: String, addressState: String, city: String, clientId: String, country: String, latitude: BigDecimal, longitude: BigDecimal, name: String, phone: String, zipcode: String): Location
  createMessage(attachmentSignedBlobId: String, message: String = null, messageThreadId: String, objectId: String, objectType: MessageObjectTypeEnum, receiverId: String!, receiverType: MessageReceiverTypeEnum!): CreateMessagePayload
  createMultiJobApplicants(applicantTimeOffs: [ApplicantTimeOffArgument!], jobIds: [String!]!, note: String, source: JobApplicantSourceEnum = opus_mobile_app): [JobApplicant!]
  createOnboardingPart(companyOnboardingId: String!, description: String!, name: String!, quizId: String, referenceUrl: String): OnboardingPart
  createOrUpdateSupportDocument(supportDocumentsAttributes: [SupportDocumentArgument!]!): [SupportDocument!]
  createOrUpdateWorkerResumes(
    """Signed blob ID generated via `createDirectUpload` mutation"""
    resumesSignedBlobIds: [String!]
  ): Worker
  createOrUpdateWorkerSpecialty(workerSpecialtiesAttributes: [WorkerSpecialtyArgument!]!): [WorkerSpecialty!]
  createReferredTraveler(deviceId: String, discipline: String, email: String!, firstName: String!, jobId: String, lastName: String!, phone: String, recruiterId: String, referralPath: String, referrerEmail: String, referrerFirstName: String, referrerLastName: String, referrerPhone: String, relationship: ReferredTravelerRelationshipEnum = app, source: SignupSourceEnum = opus_web_portal): CreateReferredTravelerPayload
  createSavedFilter(filterConditions: JobFilter, savedFilter: SavedFilterArgument): SavedFilter
  createWorkExperience(
    """"""
    agency: String

    """[Staff, Travel, Per-diem]"""
    assignmentType: String

    """Number of Beds (JNP Only)"""
    bedsInUnit: Int

    """Births Per Month (JNP Only)"""
    birthsPerMonth: String

    """"""
    chartingSoftwareUsed: String

    """Location"""
    city: String

    """"""
    country: String

    """"""
    currentlyEmployed: Boolean

    """Daily ER Census (JNP Only)"""
    dailyCensus: Float

    """Duties performed"""
    dutiesPerformed: String
    endDate: ISO8601Date

    """"""
    facilityName: String!

    """
    Facility Type - setting map (JTP Only) - [Assisted Living, Home Health, Outpatient, Outpatient-pediatrics, Hospital, School, Hospital-Outpatient, Skilled Nursing Facility, Hospital-Home Health, Multiple Settings]
    """
    facilityType: String

    """Secondary skill - shortname (JNP Only)"""
    floatSpecialty: String

    """ID of work experience"""
    id: String

    """May contact supervisor (JNP Only)"""
    mayContactSupervisor: Boolean

    """Number of OR Suites (JNP Only)"""
    numberSuites: Float

    """Patient Ratio - Nurses (JNP Only)"""
    nurseRatio: String

    """Patient Ratio - Patients (JNP Only)"""
    patientRatio: String

    """Types of patients - free text (JTP Only)"""
    patientType: String

    """Position Name (Free Text)"""
    position: String

    """
    [Still Employed, Assignment Completed, Terminated, New Opportunity, Quit Without Notice]
    """
    reasonForLeaving: String
    startDate: ISO8601Date!

    """Two letter state code"""
    state: String

    """Supervisor name (JNP Only)"""
    supervisor: String

    """Was this a travel assignment - Yes/No (JTP Only)"""
    travelAssignment: Boolean

    """Primary skill - shortname (JNP Only)"""
    unitSpecialty: String

    """"""
    zipcode: String
  ): WorkExperience
  createWorkedTimesheet(
    """Signed blob ID generated via `createDirectUpload` mutation"""
    timesheetImagesSignedBlobIds: [String!]
  ): WorkedTimecard
  createWorkerBlock(clientId: String, note: String!, workerId: String!): WorkerBlock
  createWorkerCertification(
    _destroy: Boolean

    """[certification license]"""
    certificationType: String!
    compactLicense: Boolean
    expirationDate: ISO8601Date
    id: String
    licenseDiscipline: String
    licenseImages: [FileArgument!]
    licenseImagesSignedBlobIds: [String!]
    licenseNumber: String
    licenseState: String
    title: String
  ): WorkerCertification
  createWorkerEducation(_destroy: Boolean, city: String, country: String = "United States", degreeDate: ISO8601Date, degreeName: String, id: String, major: String, schoolName: String, state: String): WorkerEducation
  createWorkerOnboarding(companyOnboardingId: String!, workerId: String): WorkerOnboarding
  createWorkerQuiz(quizAnswerIds: [String!]!, quizId: String!, workerId: String!): WorkerQuiz
  createWorkerReference(_destroy: Boolean, city: String, contactEmail: String!, contactFirstName: String!, contactFullName: String, contactLastName: String!, contactPhone: String!, facilityName: String!, jobTitle: String!, refType: WorkerReferenceTypeEnum!, relationship: String, salutation: WorkerReferenceSalutationEnum, state: String, workedFrom: ISO8601Date, workedTo: ISO8601Date): WorkerReference
  createWorkingAuthorization(dateOfBirth: ISO8601Date, idPhotoBase64: String!, idPhotoFileName: String!, legalRightToWork: Boolean!, socialSecurityNumber: String, workerId: String!): WorkingAuthorization
  deactiveClient(deactiveReason: String!, id: String!): DeactiveClientPayload
  deactiveLocation(id: String!): Location
  destroyDraftJob(id: String!): DestroyDraftJobPayload
  destroyFile(id: String!): DestroyFilePayload
  destroyFiles(ids: [String!]!): DestroyMultipleFilesPayload
  destroyJobTemplate(id: String!): DestroyJobTemplatePayload
  destroySavedFilter(savedFilter: SavedFilterArgument): DestroySavedFilterPayload
  destroyWorkExperience(id: String!): DestroyWorkExperiencePayload
  destroyWorkedShift(id: String!): DestroyWorkedShiftPayload
  destroyWorkerCertification(id: String!): DestroyWorkerCertificationPayload
  destroyWorkerEducation(id: String!): DestroyWorkerEducationPayload
  destroyWorkerExpense(id: String!): DestroyWorkerExpensePayload
  destroyWorkerReference(id: String!): DestroyWorkerReferencePayload
  destroyWorkerSpecialty(id: String!): DestroyWorkerSpecialtyPayload
  directOffer(clientId: String, employerNote: String, jobApplicantId: String, jobId: String, manualJobInformations: DirectOfferArgument, source: JobApplicantSourceEnum = opus_web_portal, workerId: String!): JobApplicant
  disconnectSocialAuthentication(socialAuthenticationId: String!): DisconnectPayload
  dismissBulletin(bulletinId: String!): DismissBulletinPayload
  employerCancelInterview(employerNote: String, id: String!): Interview
  employerFavoriteWorker(action: FavoriteActionEnum!, workerId: String!): Worker
  employerRescheduleInterview(employerNote: String, id: String!, interviewEndTime: ISO8601DateTime!, interviewStartTime: ISO8601DateTime!, timezone: String!, title: String): Interview
  employerUpdateInterview(employerNote: String, event: String!, id: String!): Interview
  employerUpdateJobApplicant(employerNote: String, event: String!, id: String!): JobApplicant

  """Export data to CSV and get download link"""
  exportBillingSubscription(clientName: String, description: String, exportAll: Boolean = false, fileType: String!, ids: [String!]!, latestPaymentStatus: String, nextPaymentAt: String, paymentMethodType: String, status: String): ExportFile

  """Export data to CSV and get download link"""
  exportClient(description: String, exportAll: Boolean = false, fileType: String!, ids: [String!]!, name: String, verifyStatus: String): ExportFile

  """Export data to CSV and get download link"""
  exportEmployer(clientName: String, email: String, exportAll: Boolean = false, fileType: String!, fullName: String, ids: [String!]!, lastSignInAt: String, phone: String, title: String): ExportFile

  """Export data to CSV and get download link"""
  exportLocation(address: String, addressState: String, city: String, clientName: String, exportAll: Boolean = false, fileType: String!, ids: [String!]!, name: String, phone: String, status: String, zipcode: String): ExportFile

  """Export data to CSV and get download link"""
  exportWorker(clientName: String, email: String, exportAll: Boolean = false, fileType: String!, firstName: String, fullName: String, ids: [String!]!, lastName: String, lastSignInAt: String, phone: String, profileCompletion: String, specialty: String, workerAddressZipcode: String): ExportFile
  favoriteOrUnfavoriteAJob(action: FavoriteActionEnum!, jobId: String!): Job
  likeOrDislikeAJob(action: LikeActionEnum!, jobId: String!): Job
  markAllMessagesAsRead(ids: [String!]!): MarkAllMessagesAsReadPayload
  markAllNotificationsStatus(events: [String!], exceptEvents: [String!], status: NotificationStatusEnum = read): MarkAllStatusPayload
  markCompleteComponent(id: String!): WalkthroughComponent
  markMessageAsRead(messageId: String!): Message
  markNotificationsStatus(notificationIds: [String!]!, status: NotificationStatusEnum = read): MarkStatusPayload
  publicCreateContactForm(description: String, email: String, fullName: String, phone: String, recaptchaToken: String, subject: String): PublicCreateContactFormPayload
  publicCreateEmployer(agreedToTerms: Boolean, avatarSignedBlobId: String, clientAttributes: ClientArgument!, email: String, firstName: String, lastName: String, password: String, passwordConfirmation: String, paymentMethod: String, phone: String, recaptchaToken: String, scope: EmployerScopeEnum, source: SignupSourceEnum = opus_web_portal, title: String): PublicCreateEmployerPayload
  publicCreateWorker(email: String!, employmentType: String, facilityTypes: String, firstName: String!, jobId: String, lastName: String!, password: String, passwordConfirmation: String, phone: String!, recaptchaToken: String, referrerCode: String, socialAuthenticationId: String, source: SignupSourceEnum = opus_web_portal, workerSpecialtiesAttributes: [WorkerSpecialtyArgument!], workingPreferredLocationsAttributes: [WorkingPreferredLocationArgument!]): PublicCreateWorkerPayload
  publishDraftJob(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, id: String!, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, title: String, weeklyPayAmount: Float, zipcode: String): Job
  quickApplyJob(email: String!, employmentType: String, facilityTypes: String, firstName: String!, jobId: String!, lastName: String!, password: String, passwordConfirmation: String, phone: String!, recaptchaToken: String, referrerCode: String, source: SignupSourceEnum = opus_web_portal, workerSpecialtiesAttributes: [WorkerSpecialtyArgument!], workingPreferredLocationsAttributes: [WorkingPreferredLocationArgument!]): QuickApplyJobWorkerPayload
  rejectClient(id: String!, rejectedReason: String!): RejectClientPayload
  removeBillingSubscription(clientId: String): RemoveSubscriptionPayload
  removeEmployer(id: String!): RemoveEmployerPayload
  removePaymentMethod(clientId: String, paymentMethodId: String!): RemovePaymentMethodPayload
  replaceInterviewer(employerIds: [String!]!, id: String!): Employer
  replayDismissedBulletin(bulletinIds: [String!]!): ReplayDismissedBulletinPayload
  resetPasswordForUser(password: String!, passwordConfirmation: String!, recaptchaToken: String, token: String!): ResetPasswordForUserPayload
  sendOtpCode(phoneNumber: String!): SendOtpCodePayload
  sendPasswordResetEmployer(email: String!): SendPasswordResetEmployerPayload
  sendPasswordResetWorker(email: String!): SendPasswordResetWorkerPayload
  setDefaultPaymentMethod(paymentMethodId: String!): SetDefaultPaymentMethodPayload
  signInEmployer(email: String!, password: String!, recaptchaToken: String): SignInEmployerPayload
  signInWorker(email: String!, password: String!, recaptchaToken: String, socialAuthenticationId: String): SignInWorkerPayload
  signOutEmployer: SignOutEmployerPayload
  signOutWorker: SignOutWorkerPayload
  signUpEmployer(agreedToTerms: Boolean, avatarSignedBlobId: String, clientAttributes: ClientArgument!, email: String, firstName: String, lastName: String, password: String, passwordConfirmation: String, paymentMethod: String, phone: String, recaptchaToken: String, scope: EmployerScopeEnum, source: SignupSourceEnum = opus_web_portal, title: String): SignUpEmployerPayload
  skipScreenStep(visibleIds: [String!]): WalkthroughComponent
  startWorkerOnboarding(id: String!): WorkerOnboarding
  syncAnonymousWorkerData(bookmarkJobsAttributes: [BookmarkJobArgument!], likeJobsAttributes: [LikeJobArgument!], savedFiltersAttributes: [SavedFilterArgument!], workerViewedJobsAttributes: [WorkerViewedJobArgument!]): SyncAnonymousWorkerDataPayload
  unblockWorker(id: String!): UnblockWorkerPayload
  updateBillingSubscription(billingPriceId: String!, clientId: String, paymentMethodId: String!): UpdateSubscriptionPayload
  updateClient(
    address1: String
    address2: String
    city: String
    contactEmail: String
    contactFirstName: String
    contactLastName: String
    contactPhone: String
    country: String
    description: String
    ein: String
    id: String!

    """Signed blob ID generated via `createDirectUpload` mutation"""
    imageSignedBlobId: String
    latitude: BigDecimal
    longitude: BigDecimal
    name: String!
    phone: String
    source: SignupSourceEnum = opus_web_portal
    state: String
    taxId: String
    url: String
    zipCode: String
  ): Client
  updateCompanyOnboarding(description: String, id: String!, name: String, referenceUrl: String): CompanyOnboarding
  updateDraftJob(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, id: String!, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, title: String, weeklyPayAmount: Float, zipcode: String): DraftJob
  updateEmployer(agreedToTerms: Boolean, avatarSignedBlobId: String, email: String, firstName: String, id: String!, lastName: String, password: String, passwordConfirmation: String, paymentMethod: String, phone: String, scope: EmployerScopeEnum, source: SignupSourceEnum = opus_web_portal, title: String): Employer
  updateIntegrationWorker(avatarImageBase64: String, avatarImageFileName: String, companyId: String, email: String, emergencyContactAttributes: EmergencyContactArgument, firstName: String, id: String!, lastName: String, maidenName: String, password: String, passwordConfirmation: String, phone: String, resumesSignedBlobIds: [String!], workExperiencesAttributes: [WorkExperienceArgument!], workerAddressAttributes: WorkerAddressArgument, workerCertificationsAttributes: [WorkerCertificationArgument!], workerReferencesAttributes: [WorkerReferenceArgument!], workingAuthorizationAttributes: WorkingAuthorizationArgument): Worker
  updateJob(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, id: String!, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, title: String, weeklyPayAmount: Float, zipcode: String): Job
  updateJobTemplate(accountId: String, address: String, address2: String, benefitContent: String, certificationsRequired: String, city: String, clientId: String, complianceRequirements: [String!], country: String, customStartDate: String, deletedBy: String, description: String, discipline: String, duration: Int, durationType: String, employerOfRecord: JobEmployerOfRecordEnum, exclusiveJob: String, facilityType: String, frequency: String, hospital: String, hoursPerWeek: Int, id: String!, isAsap: Boolean, isSkillChecklist: Boolean, jobInvitationsAttributes: [JobInvitationArgument!], jobType: String, latitude: BigDecimal, licenseStateCompact: Boolean, licenseStateRequired: [String!], licensesRequired: [String!], locationId: String, longitude: BigDecimal, minExpYear: Int, minWeeklyPayAmount: Float, profileRequirements: [String!], recommendType: JobRecommendTypeEnum, requirementNotes: String, scope: String, shifts: [String!], skillId: Int, skillLongName: String, skillName: String, slotsNumber: Int, slug: String, source: String, specialty: [String!], startDate: ISO8601DateTime, state: String, templateName: String!, title: String, weeklyPayAmount: Float, zipcode: String): JobTemplate
  updateLocation(address: String, addressState: String, city: String, clientId: String, country: String, id: String!, latitude: BigDecimal, longitude: BigDecimal, name: String, phone: String, zipcode: String): Location
  updateNotificationSetting(assignmentEndingReminder: Boolean, completeOnboarding: Boolean, documentExpired: Boolean, interviewInvitationExpired: Boolean, jobAlert: Boolean, jobsRecommendation: Boolean, licenseExpired: Boolean, licenseExpiredOptions: JSON, licenseWillBeExpiredOptions: JSON, timecardSubmissionReminder: Boolean): NotificationSetting
  updateOnboardingPart(description: String, id: String!, name: String, quizId: String, referenceUrl: String): OnboardingPart
  updatePrimaryWorkerSpecialty(id: String!, isPrimary: Boolean = true): WorkerSpecialty
  updateSavedFilter(filterConditions: JobFilter, savedFilter: SavedFilterArgument): SavedFilter
  updateWorkExperience(
    """"""
    agency: String

    """[Staff, Travel, Per-diem]"""
    assignmentType: String

    """Number of Beds (JNP Only)"""
    bedsInUnit: Int

    """Births Per Month (JNP Only)"""
    birthsPerMonth: String

    """"""
    chartingSoftwareUsed: String

    """Location"""
    city: String

    """"""
    country: String

    """"""
    currentlyEmployed: Boolean

    """Daily ER Census (JNP Only)"""
    dailyCensus: Float

    """Duties performed"""
    dutiesPerformed: String
    endDate: ISO8601Date

    """"""
    facilityName: String!

    """
    Facility Type - setting map (JTP Only) - [Assisted Living, Home Health, Outpatient, Outpatient-pediatrics, Hospital, School, Hospital-Outpatient, Skilled Nursing Facility, Hospital-Home Health, Multiple Settings]
    """
    facilityType: String

    """Secondary skill - shortname (JNP Only)"""
    floatSpecialty: String

    """ID of work experience"""
    id: String

    """May contact supervisor (JNP Only)"""
    mayContactSupervisor: Boolean

    """Number of OR Suites (JNP Only)"""
    numberSuites: Float

    """Patient Ratio - Nurses (JNP Only)"""
    nurseRatio: String

    """Patient Ratio - Patients (JNP Only)"""
    patientRatio: String

    """Types of patients - free text (JTP Only)"""
    patientType: String

    """Position Name (Free Text)"""
    position: String

    """
    [Still Employed, Assignment Completed, Terminated, New Opportunity, Quit Without Notice]
    """
    reasonForLeaving: String
    startDate: ISO8601Date!

    """Two letter state code"""
    state: String

    """Supervisor name (JNP Only)"""
    supervisor: String

    """Was this a travel assignment - Yes/No (JTP Only)"""
    travelAssignment: Boolean

    """Primary skill - shortname (JNP Only)"""
    unitSpecialty: String

    """"""
    zipcode: String
  ): WorkExperience
  updateWorker(agreedToTerms: Boolean, availableStartDate: ISO8601Date, avatarImageBase64: String, avatarImageFileName: String, dateOfBirth: ISO8601Date, email: String, emergencyContactAttributes: EmergencyContactArgument, facilityTypes: String, firstName: String, lastName: String, noCall: Boolean, noEmail: Boolean, noNotification: Boolean, noSms: Boolean, password: String, phone: String, shiftRequested: [String!], socialSecurityNumber: String, timeOffRequested: String, workerAddressAttributes: WorkerAddressArgument, workingPreferredLocationsAttributes: [WorkingPreferredLocationArgument!]): Worker
  updateWorkerBlock(id: String!, note: String!): WorkerBlock
  updateWorkerCertification(
    _destroy: Boolean

    """[certification license]"""
    certificationType: String!
    compactLicense: Boolean
    expirationDate: ISO8601Date
    id: String
    licenseDiscipline: String
    licenseImages: [FileArgument!]
    licenseImagesSignedBlobIds: [String!]
    licenseNumber: String
    licenseState: String
    title: String
  ): WorkerCertification
  updateWorkerEducation(_destroy: Boolean, city: String, country: String = "United States", degreeDate: ISO8601Date, degreeName: String, id: String, major: String, schoolName: String, state: String): WorkerEducation
  updateWorkerOnboarding(id: String!, state: String!): WorkerOnboarding
  updateWorkerOnboardingPart(id: String!, integrationAttributes: JSON): WorkerOnboardingPart
  updateWorkerReference(_destroy: Boolean, city: String, contactEmail: String!, contactFirstName: String!, contactFullName: String, contactLastName: String!, contactPhone: String!, facilityName: String!, id: String, jobTitle: String!, refType: WorkerReferenceTypeEnum!, relationship: String, salutation: WorkerReferenceSalutationEnum, state: String, workedFrom: ISO8601Date, workedTo: ISO8601Date): WorkerReference
  updateWorkingAuthorization(dateOfBirth: ISO8601Date, id: String!, idPhotoBase64: String, idPhotoFileName: String, legalRightToWork: Boolean, socialSecurityNumber: String): WorkingAuthorization
  updateWorkingPreferredLocations(workingPreferredLocationsAttributes: [WorkingPreferredLocationArgument!]): [WorkingPreferredLocation!]
  verifyClient(id: String!): VerifyClientPayload
  verifyExistedEmail(email: String!, recaptchaToken: String): VerifyExistedEmailPayload
  verifyOtpCode(otpCode: String!, phoneNumber: String!): VerifyOtpCodePayload
  verifySocialAuthentication(clientId: String!, clientToken: String, code: String, email: String, providerName: SocialProviderEnum!, recaptchaToken: String, redirectUri: String): VerifyPayload
  workerProcessInterview(event: String!, id: String!, note: String): Interview
  workerRescheduleInterview(id: String!, interviewEndTime: ISO8601DateTime!, interviewStartTime: ISO8601DateTime!, note: String, timezone: String!): JobApplicant
}

"""Search jobs near by"""
input NearByJobSearch {
  lat: BigDecimal
  long: BigDecimal
  radius: BigDecimal
}

type Notification {
  createdAt: ISO8601DateTime
  dataEvent: String
  dataId: String
  dataType: String
  heading: String
  id: String
  job: Job
  message: String
  status: String
  updatedAt: ISO8601DateTime
  url: String
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]

  """A list of nodes."""
  nodes: [Notification]
  pageInfo: PageInfo!
  totalCount: Int!
  totalRead: Int!
  totalUnread: Int!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification
}

type NotificationSetting {
  assignmentEndingReminder: Boolean
  completeOnboarding: Boolean
  documentExpired: Boolean
  id: String
  interviewInvitationExpired: Boolean
  jobAlert: Boolean
  jobsRecommendation: Boolean
  licenseExpired: Boolean
  licenseExpiredOptions: JSON
  licenseWillBeExpiredOptions: JSON
  timecardSubmissionReminder: Boolean
}

enum NotificationStatusEnum {
  """Read"""
  read

  """Unread"""
  unread
}

type OnboardingPart {
  companyId: String!
  companyOnboardingId: String!
  confirmationMessage: String
  description: String
  failedMessage: String
  id: String!
  integrationObject: String!
  isEnabled: Boolean!
  name: String!
  pendingMessage: String
  quizId: String
  referenceUrl: String

  """This field will be available to Worker session only"""
  workerOnboardingPart: WorkerOnboardingPart
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """The max page size for a given set of nodes"""
  pageSize: Int!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PaymentMethod {
  cardInfo: JSON
  id: String
  isDefault: Boolean
}

type ProfileOnboarding {
  id: String!
  worker: Worker
}

"""Autogenerated return type of PublicCreateContactForm"""
type PublicCreateContactFormPayload {
  success: Boolean
}

"""Autogenerated return type of PublicCreateEmployer"""
type PublicCreateEmployerPayload {
  success: Boolean
}

"""Autogenerated return type of PublicCreateWorker"""
type PublicCreateWorkerPayload {
  success: Boolean
}

type Query {
  """List active jobs"""
  activeJobs: ActiveJobs

  """List active worker assignments"""
  activeListWorkerAssignments: ActiveWorkerAssignments
  adminWorkerOnboardingOverview(workerId: String!): WorkerOnboardingOverview
  allowDismissedBulletins: [Bulletin!]!

  """Get all info for a worker for app initialization"""
  appInit(workerId: String): AppInit

  """Return list config app walkthroughs."""
  appWalkthroughs: [AppWalkthrough!]

  """List applied jobs"""
  appliedJobs(filter: JobApplicantStatusEnum, limit: Int = 20, offset: Int = 0): [JobApplicant!]
  billingPlans: [BillingPlan!]
  billingSubscriptions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    clientName: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BillingSubscriptionConnection
  bookmarkedJobs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): JobConnection
  bulletins: [Bulletin!]!

  """Return list US cities by given specific state"""
  cities(
    """support multi value, example AL,AR"""
    stateCode: String!
  ): [CityMaster!]!

  """Return list closed job ids"""
  closedJobsList(ids: [String!]!): [Job!]

  """Find a company by ID"""
  company(id: String!): Company

  """Find a particular company onboarding"""
  companyOnboarding(id: String!): CompanyOnboarding!

  """Find all company onboardings for a company"""
  companyOnboardings(companyId: String!): [CompanyOnboarding!]!

  """Return newest active week."""
  currentWeekManagement: WeekManagement!

  """Return active worker assignment."""
  currentWorkerAssignment: WorkerAssignment
  detailEmployer(id: String!): Employer
  detailPopularCity(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Stockton"""
    city: String!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """CA"""
    state: String!
  ): JobDetailPopularCityConnection! @deprecated(reason: "No longer support, use `popularCityJobs` instead.")
  discovers: JobDiscovers
  downloadTemplate(objectType: ImportBatchObjectEnum!): ImportTemplateFile

  """Get all employer information for app initialization"""
  employerAppInit(clientId: String): EmployerAppInit!
  employerDetailClient(id: String!): Client
  employerDetailDraftJob(id: String!): Draft

  """Find a interview by ID."""
  employerDetailInterview(id: String!): Interview

  """Find a job applicant by ID."""
  employerDetailJobApplicant(id: String!): JobApplicant
  employerDetailJobTemplate(id: String!): JobTemplate
  employerDetailLocation(id: String!): Location
  employerFavoritedWorkers(filter: WorkerFilter, jobId: String, limit: Int = 20, offset: Int = 0, sortBy: WorkerManagementSort): WorkerWithPagination

  """Return list talent job matches by job"""
  employerJobMatches(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    favorited: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int
    jobId: String!

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkerConnection
  employerJobsByFavoritedWorker(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort): JobWithPagination
  employerListClients(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    nameContain: String
  ): ClientConnection
  employerListContactForms(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ContactFormConnection
  employerListDraftJobs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): DraftConnection

  """Return list interviews."""
  employerListInterviews(filter: JobApplicantFilter, limit: Int = 20, offset: Int = 0, sortBy: JobApplicantManagementSort): InterviewWithPagination

  """Return list job submissions."""
  employerListJobApplicants(filter: JobApplicantFilter, limit: Int = 20, offset: Int = 0, sortBy: JobApplicantManagementSort): JobApplicantWithPagination
  employerListJobTemplates(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    templateNameContain: String
  ): JobTemplateConnection
  employerListLocations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    clientId: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    nameContain: String
    status: LocationActiveEnum = active
  ): LocationConnection
  employerListWorkers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): WorkerConnection
  employerSearchJobs(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort): JobWithPagination
  employerSearchWorkers(filter: WorkerFilter, jobId: String, limit: Int = 20, offset: Int = 0, sortBy: WorkerManagementSort): WorkerWithPagination

  """Get all employer information for app initialization"""
  employerSummary(clientId: String): EmployerSummary!
  employerTalentJobs(favorited: Boolean, filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort): JobWithPagination
  employerTalentWorkers(favorited: Boolean, filter: WorkerFilter, jobId: String, limit: Int = 20, offset: Int = 0, sortBy: WorkerManagementSort): WorkerWithPagination
  employerWorkerDetails(id: String!): Worker

  """Return list talent job matches by worker"""
  employerWorkerJobMatches(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    workerId: String!
  ): JobConnection
  exportFile(id: String!): ExportFile
  favoritedJobs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): JobConnection

  """List hot jobs"""
  hotJobs(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort, summaryRequire: Boolean = false): JobWithPagination
  importBatch(id: String!): ImportBatch
  invoiceDetails(id: String!): BillingInvoice
  invoices(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): BillingInvoiceConnection

  """Find a job by ID"""
  job(id: String!): Job
  jobAlerts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SavedFilterConnection!

  """Find a job applicant by ID."""
  jobApplicant(id: String!): JobApplicant

  """Return list job submissions."""
  jobApplicants(filter: JobApplicantFilter, limit: Int = 20, offset: Int = 0, sortBy: JobApplicantManagementSort): JobApplicantWithPagination
  jobSearch(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort, summaryRequire: Boolean = false): JobWithPagination
  lastViewedJobs: [Job!]
  likedJobs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): JobConnection
  listEmployers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int
    fullNameContain: String

    """Returns the last _n_ elements from the list."""
    last: Int
  ): EmployerConnection

  """Find a messsage thread by ID OR object type and object id"""
  messageThread(id: String, objectId: String = null, objectType: String = null): MessageThread

  """Get list of in-app messages by job"""
  messageThreads(filter: CompanyManagementFilter = null, keywordSearch: String = null, limit: Int = 20, offset: Int = 0, workerId: String = null): [MessageThread!]

  """Get list of in-app messages for current user and object_type"""
  messages(filter: MessageFilter!, keywordSearch: String = "*", limit: Int = 10, offset: Int = 0): [Message!]

  """Detail worker notifications"""
  notification(id: String!): Notification

  """List worker notifications"""
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    events: [String!]
    exceptEvents: [String!]

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): NotificationConnection

  """Find a particular onboarding part"""
  onboardingPart(id: String!): OnboardingPart!

  """Find all onboarding parts for a company onboarding"""
  onboardingParts(companyOnboardingId: String!): [OnboardingPart!]!

  """List applied jobs with pagination"""
  paginationAppliedJobs(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): JobApplicantConnection
  paymentMethods(clientId: String): [PaymentMethod!]
  popularCities: [JobMatchingWithImage!]

  """Get list jobs of popular city - Apply Search Base"""
  popularCityJobs(
    """Stockton"""
    city: String!
    filter: JobFilter
    limit: Int = 20
    offset: Int = 0
    sortBy: JobManagementSort

    """CA"""
    state: String!
    summaryRequire: Boolean = false
  ): JobWithPagination

  """Find a public job by ID without login"""
  publicJob(id: String!): Job

  """Find a quiz"""
  quiz(id: String!): Quiz!

  """Find all quizzes for a company onboarding"""
  quizzes(companyOnboardingId: String!): [Quiz!]!
  recruiters: [Recruiter!]!

  """List all saved filter of current worker"""
  savedFilters: [SavedFilter!]!

  """Return list signed url by given array blob ids"""
  signedUrls(blobIds: [String!]!): [File!]
  similarAJob(filter: JobFilter, id: String!, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort, summaryRequire: Boolean = false): JobWithPagination
  similarSearchJobs(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort, summaryRequire: Boolean = false): JobWithPagination

  """Return list US states"""
  states(countryCode: String!): [StateMaster!]!
  suggestionJobs(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort, summaryRequire: Boolean = false): JobWithPagination
  suggestionJobsForEmptySearch(limit: Int = 20, offset: Int = 0): JobWithPagination @deprecated(reason: "No longer support, use `similarSearchJobs` instead.")

  """List support documents"""
  supportDocuments: [SupportDocument!]!
  trendingJobs(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort, summaryRequire: Boolean = false): JobWithPagination

  """Return worked timecards images."""
  workedTimecards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): FileConnection

  """Find a worked timesheet by ID."""
  workedTimesheet(id: String!): WorkedTimesheet

  """Return worked timesheet histories."""
  workedTimesheetHistories: [WorkedTimesheet!]

  """Find a worker by ID"""
  worker(id: String!): Worker

  """Find a worker assignment by ID."""
  workerAssignment(id: String = null): WorkerAssignment

  """Return list worker assignments."""
  workerAssignments(limit: Int = 20, offset: Int = 0): [WorkerAssignment!]
  workerBlocks(workerId: String!): BlockedWorker

  """Find a worker certification overview"""
  workerCertificationOverview(id: String!): WorkerCertificationOverview!

  """List worker certifications"""
  workerCertifications(workerId: String!): [WorkerCertification!]!

  """Find a worker education overview"""
  workerEducationOverview(id: String!): WorkerEducationOverview!

  """List worker educations"""
  workerEducations: [WorkerEducation!]!

  """Find a worker onboarding"""
  workerOnboarding(id: String): WorkerOnboarding!

  """overview state of current worker onboarding"""
  workerOnboardingOverview: WorkerOnboardingOverview

  """Find a worker onboarding"""
  workerOnboardingPart(id: String!): WorkerOnboardingPart!

  """Find all worker onboarding parts for a worker onboarding"""
  workerOnboardingParts(workerOnboardingId: String!): [WorkerOnboardingPart!]!

  """Find all worker on-boardings for a company"""
  workerOnboardings(companyId: String): [WorkerOnboarding!]!

  """Find a worker quiz"""
  workerQuiz(id: String!): WorkerQuiz!

  """Find all quizzes for a company onboarding"""
  workerQuizzes(workerId: String!): [WorkerQuiz!]!

  """List worker references"""
  workerReferences(workerId: String!): [WorkerReference!]!

  """all social authentication of current worker"""
  workerSocialAuthentications: [UserSocialAuthentication!]!

  """List worker specialties"""
  workerSpecialties: [WorkerSpecialty!]!

  """Verify auth token by ID"""
  workerToken(token: String!): WorkerToken
}

"""Autogenerated return type of QuickApplyJobWorker"""
type QuickApplyJobWorkerPayload {
  success: Boolean!
}

type Quiz {
  companyId: String!
  description: String!
  id: String!
  name: String!
  passingPercentage: Int!
  quizQuestions: [QuizQuestion!]!
  quizQuestionsNumber: Int
}

type QuizAnswer {
  answer: String!
  correct: Boolean!
  description: String!
  id: String!
  name: String!
  quizQuestionId: String
}

type QuizQuestion {
  companyId: String!
  description: String!
  id: String!
  name: String!
  question: String!
  quizAnswersNumber: Int
  quizAnwsers: [QuizAnswer!]!
}

type RankedJob {
  job: Job
  matchingPercentage: Float
}

type Recruiter {
  companyId: String!
  email: String
  id: String!
  name: String
  phone: String
  title: String
}

enum ReferredTravelerRelationshipEnum {
  """App"""
  app

  """Friend"""
  friend

  """Job"""
  job
}

"""Autogenerated return type of RejectClient"""
type RejectClientPayload {
  success: Boolean
}

"""Autogenerated return type of RemoveEmployer"""
type RemoveEmployerPayload {
  id: String!
  success: Boolean!
}

"""Autogenerated return type of RemovePaymentMethod"""
type RemovePaymentMethodPayload {
  success: Boolean
}

"""Autogenerated return type of RemoveSubscription"""
type RemoveSubscriptionPayload {
  success: Boolean
}

"""Autogenerated return type of ReplayDismissedBulletin"""
type ReplayDismissedBulletinPayload {
  success: Boolean!
}

"""Autogenerated return type of ResetPasswordForUser"""
type ResetPasswordForUserPayload {
  success: Boolean
}

enum SaveFilterFrequencyEnum {
  """Daily"""
  daily

  """Monthly"""
  monthly

  """Weekly"""
  weekly
}

enum SaveFilterPauseAlertPeriodEnum {
  """Until 1 month"""
  until_1_month

  """Until 2 months"""
  until_2_month

  """Until 6 months"""
  until_6_month

  """Until 1 year"""
  until_12_month
}

type SavedFilter {
  alertChannel: JSON
  alertEmail: String
  alertFirstName: String
  alertLastName: String
  company: Company
  companyId: String
  deviceId: String
  enableAlert: Boolean
  filterCondition: FilterCondition
  frequency: String
  id: String!
  jobs: [Job!]
  lastAlertedAt: ISO8601DateTime
  name: String
  pauseAlert: Boolean
  pauseAlertPeriod: String
  pauseAlertUntil: ISO8601Date
  startPauseAlertDate: ISO8601Date
  worker: Worker
  workerId: String
}

input SavedFilterArgument {
  alertChannel: JSON
  alertEmail: String
  alertFirstName: String
  alertLastName: String
  deviceId: String
  enableAlert: Boolean
  filterConditionAttributes: JobFilter
  frequency: SaveFilterFrequencyEnum
  id: String
  name: String
  pauseAlert: Boolean
  pauseAlertPeriod: SaveFilterPauseAlertPeriodEnum
}

"""The connection type for SavedFilter."""
type SavedFilterConnection {
  """A list of edges."""
  edges: [SavedFilterEdge]

  """A list of nodes."""
  nodes: [SavedFilter]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SavedFilterEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SavedFilter
}

"""Autogenerated return type of SendOtpCode"""
type SendOtpCodePayload {
  success: Boolean
  worker: Worker
}

"""Autogenerated return type of SendPasswordResetEmployer"""
type SendPasswordResetEmployerPayload {
  success: Boolean
}

"""Autogenerated return type of SendPasswordResetWorker"""
type SendPasswordResetWorkerPayload {
  success: Boolean
}

"""Autogenerated return type of SetDefaultPaymentMethod"""
type SetDefaultPaymentMethodPayload {
  success: Boolean
}

"""Autogenerated return type of SignInEmployer"""
type SignInEmployerPayload {
  authToken: String
  employer: Employer
}

"""Autogenerated return type of SignInWorker"""
type SignInWorkerPayload {
  authToken: String
  notificationChannel: String
  worker: Worker
}

"""Autogenerated return type of SignOutEmployer"""
type SignOutEmployerPayload {
  success: Boolean
}

"""Autogenerated return type of SignOutWorker"""
type SignOutWorkerPayload {
  success: Boolean
}

"""Autogenerated return type of SignUpEmployer"""
type SignUpEmployerPayload {
  success: Boolean
}

enum SignupSourceEnum {
  """Opus Mobile App"""
  opus_mobile_app

  """Opus Web Portal"""
  opus_web_portal
}

enum SocialProviderEnum {
  """apple"""
  apple

  """facebook"""
  facebook

  """google"""
  google

  """linkedin"""
  linkedin
}

enum SortOrder {
  """Ascending"""
  asc

  """Descending"""
  desc
}

input StartDateSearch {
  from: ISO8601Date
  to: ISO8601Date
}

type StateMaster {
  countryCode: String
  countryId: Int
  id: String!
  latitude: String
  longitude: String
  name: String
  stateCode: String
}

enum SubmissionScopeEnum {
  """Default"""
  default

  """Direct offer"""
  direct_offer

  """Job Applicant"""
  job_applicant

  """Offer"""
  offer
}

type Submittal {
  client: Client
  externalUpdatedAt: ISO8601Date
  id: String
  job: Job
  jobId: String
  status: String
  submittalDate: ISO8601Date
  worker: Worker
  workerId: String
}

type SupportDocument {
  company: Company
  document: File
  documentType: String
  id: String
  worker: Worker
}

input SupportDocumentArgument {
  """Signed blob ID generated via `createDirectUpload` mutation"""
  documentSignedBlobId: String
  documentType: String!
  id: String
}

"""Autogenerated return type of SyncAnonymousWorkerData"""
type SyncAnonymousWorkerDataPayload {
  success: Boolean
  worker: Worker
}

type TermsOfService {
  id: String!
  url: String!
  version: String!
}

enum TimePeriodEnum {
  """By month"""
  monthly

  """By quarter"""
  quarterly

  """By week"""
  weekly

  """By year"""
  yearly
}

"""Autogenerated return type of UnblockWorker"""
type UnblockWorkerPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateSubscription"""
type UpdateSubscriptionPayload {
  success: Boolean
}

"""User information, used as Worker or Employer"""
type User {
  avatar: File
  email: String
  firstName: String
  id: String!
  lastName: String
  phone: String
}

type UserSocialAuthentication {
  email: String
  firstName: String
  id: String!
  lastName: String
  providerName: String!
  providerUuid: String!
  userId: String
}

type UserTermsOfService {
  agreedAt: String!
  id: String!
  termsOfService: TermsOfService!
}

"""Autogenerated return type of VerifyClient"""
type VerifyClientPayload {
  success: Boolean
}

"""Autogenerated return type of VerifyExistedEmail"""
type VerifyExistedEmailPayload {
  existed: Boolean
}

"""Autogenerated return type of VerifyOtpCode"""
type VerifyOtpCodePayload {
  success: Boolean
}

"""Autogenerated return type of Verify"""
type VerifyPayload {
  authToken: String
  emailHasAccount: Boolean!
  notificationChannel: String
  userSocialAuthentication: UserSocialAuthentication!
  worker: Worker
}

type WalkthroughComponent {
  completed: Boolean
  description: String
  id: String!
  target: String!
  title: String
}

type WeekManagement {
  active: Boolean
  endDate: ISO8601Date
  id: String!
  startDate: ISO8601Date
}

type WorkExperience {
  agency: String
  assignmentType: String
  bedsInUnit: Int
  birthsPerMonth: String
  chartingSoftwareUsed: String
  city: String
  country: String
  currentlyEmployed: Boolean
  dailyCensus: Float
  dutiesPerformed: String
  endDate: ISO8601Date
  facilityName: String
  facilityType: String
  floatSpecialty: String
  id: String
  mayContactSupervisor: Boolean
  numberSuites: Float
  nurseRatio: String
  patientRatio: String
  patientType: String
  position: String
  reasonForLeaving: String
  startDate: ISO8601Date
  state: String
  supervisor: String
  travelAssignment: Boolean
  unitSpecialty: String
  zipcode: String
}

input WorkExperienceArgument {
  _destroy: Boolean
  agency: String
  bedsInUnit: String
  chartingSoftwareUsed: String
  city: String
  country: String
  currentlyEmployed: Boolean
  endDate: ISO8601Date
  facilityName: String
  floated: Boolean
  id: String
  patientRatio: Float
  startDate: ISO8601Date
  state: String
  travelAssignment: Boolean
  unitSpecialty: String
  unitsFloatedTo: String
  zipcode: String
}

type WorkExperienceOverview {
  discipline: String
  id: String
  primarySpecialty: String
  secondarySpecialty: String
  workExperiences: [WorkExperience!]
  worker: Worker
  yearsOfExperience: String
}

type WorkWeek {
  active: Boolean
  endDate: ISO8601Date
  id: String
  startDate: ISO8601Date
}

type WorkedTimecard {
  id: String!
  timesheetImages: [File!]
}

type WorkedTimesheet {
  callHours: Float
  id: String!
  paidHours: Float
  shiftsWorked: Float
  status: String
  weekManagement: WorkWeek
}

type Worker {
  agreedToTerms: Boolean
  availableStartDate: ISO8601Date
  avatar: File
  avatarUrl: String
  blocked: Boolean
  blockedClient: BlockedClient
  changePasswordRequired: Boolean
  company: Company
  completedJobsNumber: Int
  dateOfBirth: ISO8601Date
  email: String
  emergencyContact: EmergencyContact
  employmentType: String
  facilityTypes: String
  firstName: String
  hasActiveAssignment: Boolean
  id: String
  isFavorited: Boolean
  jobCategoriesWorkedNumber: Int
  jobMatchingScore(jobId: String!): Float
  lastName: String
  lastOtpExpiredAt: ISO8601DateTime
  lastSignInAt: String
  locationsWorkedNumber: Int
  maidenName: String
  noCall: Boolean
  noEmail: Boolean
  noNotification: Boolean
  noSms: Boolean
  noTalentMatches: Int
  notificationSetting: NotificationSetting
  overallRating: String
  phone: String
  phoneVerifiedAt: String
  profilePercentageCompleted: Int
  recruiter: Recruiter
  referralCode: String
  referralMethod: String
  referrerCode: String
  remainingExpirationTime: Int
  resumes: [File!]
  shiftRequested: [String!]
  socialSecurityNumber: String
  supportDocuments: [SupportDocument!]
  timeOffRequested: String
  totalUnreadMessage: Int
  workAuthorized: Boolean
  workExperienceOverview: WorkExperienceOverview
  workExperiences: [WorkExperience!]
  workedTimesheets: [WorkedTimesheet!]
  workerAddress: WorkerAddress
  workerCertifications: [WorkerCertification!]
  workerEducations: [WorkerEducation!]
  workerNotes: [WorkerNote!]
  workerOnboardings: [WorkerOnboarding!]
  workerReferences: [WorkerReference!]
  workerSpecialties: [WorkerSpecialty!]
  workingAuthorization: WorkingAuthorization
  workingPreferredLocations: [WorkingPreferredLocation!]
}

type WorkerAddress {
  aptNumber: String
  city: String
  country: String
  id: String!
  state: String
  street: String
  workerId: Boolean!
  zipcode: String
}

input WorkerAddressArgument {
  aptNumber: String
  city: String!
  country: String
  id: String
  state: String!
  street: String!
  zipcode: String!
}

type WorkerAssignment {
  address: String
  address2: String
  availableToExtend: Boolean
  city: String
  client: Client
  country: String
  createdAt: ISO8601DateTime
  currentWorkWeek: WorkWeek
  discipline: String
  duration: Int
  durationType: String
  endDate: ISO8601Date
  frequency: String
  id: String!
  job: Job
  jobApplicant: JobApplicant
  jobTitle: String
  latitude: BigDecimal
  longitude: BigDecimal
  minPayAmount: Float
  payAmount: Float
  previousWorkWeek: WorkWeek
  shifts: [String!]
  specialty: String
  startDate: ISO8601Date
  state: String
  status: String
  updatedAt: ISO8601DateTime
  worker: Worker
  zipcode: String
}

type WorkerBlock {
  blockedLevel: String
  client: Client
  clientId: String
  company: Company
  companyId: String
  createdAt: ISO8601DateTime
  employer: Company
  employerId: String
  id: String
  note: String
  updatedAt: ISO8601DateTime
  worker: Worker
  workerId: String
}

input WorkerBlockArgument {
  _destroy: Boolean
  blockedLevel: WorkerBlockLevelEnum = client
  clientId: String
  id: String
  note: String!
}

enum WorkerBlockLevelEnum {
  """By client level"""
  client

  """By company level"""
  company
}

type WorkerCertification {
  certificationType: String
  compactLicense: Boolean
  company: Company
  createdAt: ISO8601DateTime
  expirationDate: ISO8601Date
  id: String
  licenseDiscipline: String
  licenseImages: [File!]
  licenseNumber: String
  licenseState: String
  title: String
  worker: Worker
}

input WorkerCertificationArgument {
  _destroy: Boolean

  """[certification license]"""
  certificationType: String!
  compactLicense: Boolean
  expirationDate: ISO8601Date
  id: String
  licenseDiscipline: String
  licenseImages: [FileArgument!]
  licenseImagesSignedBlobIds: [String!]
  licenseNumber: String
  licenseState: String
  title: String
}

type WorkerCertificationOverview {
  id: String!
  workerCertifications: [WorkerCertification!]
}

"""The connection type for Worker."""
type WorkerConnection {
  """A list of edges."""
  edges: [WorkerEdge]

  """A list of nodes."""
  nodes: [Worker]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type WorkerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Worker
}

type WorkerEducation {
  city: String
  company: Company
  country: String
  createdAt: ISO8601DateTime
  degreeDate: ISO8601Date
  degreeName: String
  id: String
  major: String
  schoolName: String
  state: String
  worker: Worker
}

type WorkerEducationOverview {
  id: String!
  workerEducations: [WorkerEducation!]
}

input WorkerFilter {
  keyword: String

  """candidates/talent_matches"""
  workerScope: WorkerScopeEnum
}

"""A field for sorting"""
input WorkerManagementSort {
  field: WorkerManagementSortEnum!
  order: SortOrder!
}

enum WorkerManagementSortEnum {
  """By created date"""
  NEWEST
}

type WorkerNote {
  company: Company
  id: String
  note: String
  noteType: String
  worker: Worker
}

type WorkerOnboarding {
  companyOnboardingId: String!
  currentPartIndex: Int
  id: String!
  message: String
  numOfCompletedSteps: Int
  pendingWorkerOnboardingPart: WorkerOnboardingPart
  percentageCompleted: Int
  permittedEvents: [String!]
  state: String!
  worker: Worker
}

type WorkerOnboardingOverview {
  companyOnboarding: CompanyOnboarding!
  completedMessage: String
  id: String!
  message: String
  onboardingParts: [OnboardingPart!]
  percentageCompleted: Int
  state: String!
  worker: Worker
}

type WorkerOnboardingPart {
  id: String!
  integration: WorkerOnboardingPartIntegration
  integrationConfigurations: JSON
  integrationObject: String!
  onboardingPart: OnboardingPart!
  state: String!
  workerId: String
  workerOnboarding: WorkerOnboarding!
}

"""Integration object from WorkerOnboardingPart"""
union WorkerOnboardingPartIntegration = GroupOnboardingPart | ProfileOnboarding | UserTermsOfService | WorkExperienceOverview | WorkerCertificationOverview | WorkerEducationOverview | WorkerReferenceOnboarding

type WorkerQuiz {
  correctionPercentage: Float
  id: String!
  quiz: Quiz!
  state: String!
  workerId: String!
  workerQuizAnswers: [WorkerQuizAnswer!]
}

type WorkerQuizAnswer {
  id: String!
  quizAnswerId: String!
  workerId: String!
}

type WorkerReference {
  city: String
  company: Company
  contactEmail: String
  contactFirstName: String
  contactFullName: String
  contactLastName: String
  contactPhone: String
  createdAt: ISO8601DateTime
  facilityName: String
  id: String
  jobTitle: String
  refType: WorkerReferenceTypeEnum
  relationship: String
  salutation: WorkerReferenceSalutationEnum
  state: String
  workedFrom: ISO8601Date
  workedTo: ISO8601Date
  worker: Worker
}

input WorkerReferenceArgument {
  _destroy: Boolean
  contactEmail: String
  contactFirstName: String!
  contactFullName: String
  contactLastName: String!
  contactPhone: String!
  facilityName: String!
  id: String
  jobTitle: String
  waitToContact: Boolean
}

type WorkerReferenceOnboarding {
  id: String!
  workerReferences: [WorkerReference!]
}

enum WorkerReferenceSalutationEnum {
  """Dr."""
  dr

  """Mr."""
  mr

  """Mrs."""
  mrs

  """Ms."""
  ms

  """Mx."""
  mx

  """None Preferred"""
  non_preferred

  """Professor"""
  professor
}

enum WorkerReferenceTypeEnum {
  """Current"""
  current

  """Former"""
  former
}

enum WorkerScopeEnum {
  """Talent Matches page"""
  talent_matches
}

type WorkerSkillChecklist {
  company: Company
  frequency: Int
  id: String
  proficiency: Int
  question: String
  worker: Worker
  workerSkillChecklistSection: WorkerSkillChecklistSection
}

input WorkerSkillChecklistArgument {
  _destroy: Boolean
  frequency: Int
  id: String
  proficiency: Int
  question: String!
  workerId: String!
}

type WorkerSkillChecklistSection {
  company: Company
  id: String
  name: String
  worker: Worker
  workerSkillChecklists: [WorkerSkillChecklist!]
  workerSpecialty: WorkerSpecialty
}

input WorkerSkillChecklistSectionArgument {
  id: String
  name: String!
  workerId: String!
  workerSkillChecklistsAttributes: [WorkerSkillChecklistArgument!]!
}

type WorkerSpecialty {
  category: String
  company: Company
  completedChecklist: Boolean
  id: String
  isExpired: Boolean
  isPrimary: Boolean
  specialty: String
  specialtyId: String
  specialtyLongName: String
  status: String
  worker: Worker
  workerSkillChecklistSections: [WorkerSkillChecklistSection!]
}

input WorkerSpecialtyArgument {
  _destroy: Boolean
  category: String!
  id: String
  isPrimary: Boolean!
  specialty: String!
  workerSkillChecklistSectionsAttributes: [WorkerSkillChecklistSectionArgument!]!
}

type WorkerToken {
  notificationChannel: String!
  token: String!
  worker: Worker
}

input WorkerViewedJobArgument {
  jobId: String!
  lastViewedAt: ISO8601DateTime!
}

type WorkerWithPagination {
  totalCount: Int
  workers: [Worker!]
}

type WorkingAuthorization {
  dateOfBirth: ISO8601Date
  id: String
  idPhotoUrl: String!
  legalRightToWork: Boolean!
  socialSecurityNumber: String
  workerId: String
}

input WorkingAuthorizationArgument {
  dateOfBirth: ISO8601Date
  id: String
  legalRightToWork: Boolean = false
  socialSecurityNumber: String
}

type WorkingPreferredLocation {
  id: String
  preferredWorkingCity: String
  preferredWorkingState: String
}

input WorkingPreferredLocationArgument {
  _destroy: Boolean
  id: String
  preferredWorkingCity: String
  preferredWorkingState: String
}