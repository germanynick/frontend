"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type AppInit {
  chatIntegrationSetting: ChatIntegrationSetting
  company: Company
  companyConfig: CompanyConfig
  companyReferencesData: CompanyReferencesData
  masterData: JSON
  worker: Worker
  workerOnboarding: WorkerOnboarding
}

"""A valid big decimal as a string"""
scalar BigDecimal

"""Autogenerated return type of ChangePasswordForWorker."""
type ChangePasswordForWorkerPayload {
  success: Boolean
}

type ChatIntegrationSetting {
  active: Boolean
  configuration: JSON
  provider: String
}

type CityMaster {
  countryCode: String
  countryId: Int
  id: String!
  latitude: String
  longitude: String
  name: String
  stateCode: String
  stateId: Int
}

type Company {
  address: String
  addressState: String
  city: String
  companyConfig: CompanyConfig
  country: String
  description: String
  id: String!
  logoUrl: String!
  mainContactEmail: String
  mainContactName: String
  name: String
  phone: String
  workers: [Worker!]
  zip: String
}

type CompanyConfig {
  adpUrl: String
  benefitUrls: JSON
  companyId: String
  contactSupportUrl: String
  defaultLocationImageMobileUrl: String
  defaultLocationImageThumbnailUrl: String
  defaultLocationImageWebUrl: String
  distanceUnit: String
  enableClickTracking: Boolean
  enableScreenTracking: Boolean
  facebookUrl: String
  faqsUrl: String
  id: String!
  instagramUrl: String
  linkedInUrl: String
  linkedinRedirectUrl: String
  livechatIntegration: LivechatIntegration
  messagingServiceSender: String
  mobileOpusPolicies: String
  oneSignalAppId: String
  privacyPoblicyUrl: String
  privacyPolicyContent: String
  referalRewardContent: String
  reportBugsUrl: String
  termUrl: String
  twitterUrl: String
  usingModules: [String!]
  webOpusPolicies: String
  webPortalUrl: String
  workerTermsOfService: TermsOfService
  youtubeUrl: String
}

type CompanyReferencesData {
  cities(stateCode: String!): [CityMaster!]!
  states(countryCode: String!): [StateMaster!]!
}

"""Autogenerated return type of CreateIntegrationWorker."""
type CreateIntegrationWorkerPayload {
  authToken: String!
  notificationChannel: String
  worker: Worker!
}

"""Autogenerated return type of DestroyWorkerEducation."""
type DestroyWorkerEducationPayload {
  id: String!
  success: Boolean!
}

type Discipline {
  externalId: String
  name: String
}

type Facility {
  active: String
  companyId: String
  description: String
  externalId: String
  facilityGroupId: String
  locationId: String
  name: String
}

type File {
  blobId: String
  contentType: String
  fileUrl: String
  filename: String
  id: String
  imageUrls(
    """For example: 100x100, 200x200"""
    size: [String!]!
  ): JSON

  """deprecated"""
  thumbnails: JSON
}

type GroupOnboardingPart {
  company: Company!
  id: String!
  state: String!
  worker: Worker!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Represents untyped JSON"""
scalar JSON

type Job {
  createdAt: ISO8601DateTime
  createdDate: ISO8601DateTime
  customStartDate: String
  distance: Float
  duration: Int
  exclusiveJob: Boolean
  externalCreatedAt: ISO8601Date
  externalUpdatedAt: ISO8601Date
  facilityType: String
  favoriteCount: Int
  frequency: String
  hoursPerWeek: Int
  id: String
  images: [String!]
  jobGeneral: JobGeneral
  jobType: String
  locationImage: LocationImage
  matchingPercentage: Float
  minWeeklyPayAmount: Float
  shifts: [String!]
  slotsNumber: Int
  slug: String
  startDate: ISO8601Date
  status: String
  title: String
  updatedAt: ISO8601DateTime
  viewCount: Int
  weeklyPayAmount: Float
}

"""Filter jobs"""
input JobFilter {
  exclusiveJob: Boolean
  externalId: String
  facilityTypes: [String!]
  jobIds: [String!]
  jobTypes: [String!]
  keyword: String
  locationCities: [String!]
  locationStates: [String!]
  maxWage: Float
  minMatchingPercentage: Int
  minWage: Float
  nearBy: NearByJobSearch
  postedInDays: Int
  profession: String
  shifts: [String!]
  specialties: [String!]
  startDate: StartDateSearch
}

type JobGeneral {
  companyId: String
  description: String
  discipline: Discipline
  facility: Facility
  hotJob: String
  payCurrency: String
  requirements: String
  setting: String
  specialties: [Specialty!]
}

"""Job management sorting"""
input JobManagementSort {
  field: JobManagementSortEnum!
  order: SortOrder!
}

enum JobManagementSortEnum {
  """By distance"""
  DISTANCE

  """By created date"""
  NEWEST

  """By weekly pay amount"""
  PAY

  """By matching score"""
  SCORE

  """By start date"""
  START_DATE
}

type JobWithPagination {
  jobs: [Job!]
  totalCount: Int
}

type LivechatIntegration {
  accountId: String
}

type LocationImage {
  city: String
  id: String
  mobileImage: File
  state: String
  thumbnailImage: File
  webImage: File
}

type Mutation {
  changePasswordForWorker(oldPassword: String, password: String!, passwordConfirmation: String!): ChangePasswordForWorkerPayload
  createIntegrationWorker(email: String!, firstName: String!, lastName: String!, noSms: Boolean = true, password: String!, passwordConfirmation: String!, phone: String!, recaptchaToken: String, referrerCode: String, socialAuthenticationId: String, source: SignupSourceEnum = opus_web_portal): CreateIntegrationWorkerPayload
  createWorkerEducation(_destroy: Boolean, city: String, country: String = "United States", degreeDate: ISO8601Date, degreeName: String, major: String, schoolName: String, state: String): WorkerEducation
  destroyWorkerEducation(id: String!): DestroyWorkerEducationPayload
  resetPasswordForWorker(password: String!, passwordConfirmation: String!, recaptchaToken: String, token: String!, userTokenId: String!): ResetPasswordForWorkerPayload
  sendPasswordResetWorker(email: String!): SendPasswordResetWorkerPayload
  signInWorker(email: String!, password: String!, recaptchaToken: String, socialAuthenticationId: String): SignInWorkerPayload
  signOutWorker: SignOutWorkerPayload
  updateWorkerEducation(_destroy: Boolean, city: String, country: String = "United States", degreeDate: ISO8601Date, degreeName: String, id: String!, major: String, schoolName: String, state: String): WorkerEducation
}

"""Search jobs near by"""
input NearByJobSearch {
  lat: BigDecimal
  long: BigDecimal
  radius: BigDecimal
}

type NotificationSetting {
  assignmentEndingReminder: Boolean
  completeOnboarding: Boolean
  documentExpired: Boolean
  id: String
  jobAlert: Boolean
  jobsRecommendation: Boolean
  licenseExpired: Boolean
  licenseExpiredOptions: JSON
  licenseWillBeExpiredOptions: JSON
  timecardSubmissionReminder: Boolean
}

type OnboardingPart {
  companyId: String!
  companyOnboardingId: String!
  confirmationMessage: String
  description: String
  failedMessage: String
  id: String!
  integrationObject: String!
  isEnabled: Boolean!
  name: String!
  pendingMessage: String
  quizId: String
  referenceUrl: String

  """This field will be available to Worker session only"""
  workerOnboardingPart: WorkerOnboardingPart
}

type Query {
  appInit: AppInit

  """Return list US cities by given specific state"""
  cities(
    """support multi value, example AL,AR"""
    stateCode: String!
  ): [CityMaster!]!

  """Find a job by ID"""
  job(id: String!): Job
  jobSearch(filter: JobFilter, limit: Int = 20, offset: Int = 0, sortBy: JobManagementSort): JobWithPagination

  """Return list US states"""
  states(countryCode: String!): [StateMaster!]!

  """Find a worker by ID"""
  worker(id: String): Worker

  """List worker educations"""
  workerEducations(workerId: String): [WorkerEducation!]!
}

type Recruiter {
  companyId: String!
  email: String
  id: String!
  name: String
  phone: String
  title: String
}

"""Autogenerated return type of ResetPasswordForWorker."""
type ResetPasswordForWorkerPayload {
  success: Boolean
}

type ResumeOnboarding {
  id: String!
  worker: Worker
}

"""Autogenerated return type of SendPasswordResetWorker."""
type SendPasswordResetWorkerPayload {
  userTokenId: String
}

"""Autogenerated return type of SignInWorker."""
type SignInWorkerPayload {
  authToken: String
  notificationChannel: String
  worker: Worker
}

"""Autogenerated return type of SignOutWorker."""
type SignOutWorkerPayload {
  success: Boolean
}

enum SignupSourceEnum {
  """Opus Mobile App"""
  opus_mobile_app

  """Opus Web Portal"""
  opus_web_portal
}

enum SortOrder {
  """Ascending"""
  asc

  """Descending"""
  desc
}

type Specialty {
  companyId: String
  hasChecklist: Boolean
  longName: String
  name: String
  status: String
}

type SpecialtyOnboarding {
  id: String!
  workerSpecialties: [WorkerSpecialty!]
}

input StartDateSearch {
  from: ISO8601Date
  to: ISO8601Date
}

type StateMaster {
  countryCode: String
  countryId: Int
  id: String!
  latitude: String
  longitude: String
  name: String
  stateCode: String
}

type TermsOfService {
  id: String!
  url: String!
  version: String!
}

type UserTermsOfService {
  agreedAt: String!
  id: String!
  termsOfService: TermsOfService!
}

type WorkExperience {
  agency: String
  assignmentType: String
  bedsInUnit: Int
  birthsPerMonth: String
  chartingSoftwareUsed: String
  city: String
  country: String
  currentlyEmployed: Boolean
  dailyCensus: Float
  dutiesPerformed: String
  endDate: ISO8601Date
  facilityName: String
  facilityType: String
  floatSpecialty: String
  id: String
  mayContactSupervisor: Boolean
  numberSuites: Float
  nurseRatio: String
  patientRatio: String
  patientType: String
  position: String
  reasonForLeaving: String
  startDate: ISO8601Date
  state: String
  supervisor: String
  travelAssignment: Boolean
  unitSpecialty: String
  zipcode: String
}

type WorkExperienceOverview {
  discipline: String
  id: String
  primarySpecialty: String
  secondarySpecialty: String
  workExperiences: [WorkExperience!]
  yearsOfExperience: String
}

type WorkWeek {
  active: Boolean
  endDate: ISO8601Date
  id: String
  startDate: ISO8601Date
}

type WorkedTimesheet {
  callHours: Float
  id: String!
  paidHours: Float
  shiftsWorked: Float
  status: String
  weekManagement: WorkWeek
}

type Worker {
  agreedToTerms: Boolean
  availableStartDate: ISO8601Date
  changePasswordRequired: Boolean
  company: Company
  completedJobsNumber: Int
  email: String
  facilityTypes: String
  firstName: String
  id: String
  jobCategoriesWorkedNumber: Int
  lastName: String
  lastOtpExpiredAt: ISO8601DateTime
  lastSignInAt: String
  locationsWorkedNumber: Int
  maidenName: String
  noCall: Boolean
  noEmail: Boolean
  noNotification: Boolean
  noSms: Boolean
  notificationSetting: NotificationSetting
  overallRating: String
  phone: String
  phoneVerifiedAt: String
  recruiter: Recruiter
  referralCode: String
  referralMethod: String
  referrerCode: String
  shiftRequested: String
  timeOffRequested: String
  workAuthorized: Boolean
  workExperienceOverview: WorkExperienceOverview
  workExperiences: [WorkExperience!]
  workedTimesheets: [WorkedTimesheet!]
  workerAddress: WorkerAddress
  workingPreferredLocations: [WorkingPreferredLocation!]
}

type WorkerAddress {
  aptNumber: String
  city: String
  country: String
  id: String!
  state: String
  street: String
  workerId: Boolean!
  zipcode: String
}

type WorkerEducation {
  city: String
  country: String
  createdAt: ISO8601DateTime
  degreeDate: ISO8601Date
  degreeName: String
  id: String
  major: String
  schoolName: String
  state: String
  worker: Worker
}

type WorkerOnboarding {
  companyOnboardingId: String!
  currentPartIndex: Int
  id: String!
  message: String
  pendingWorkerOnboardingPart: WorkerOnboardingPart
  percentageCompleted: Int
  permittedEvents: [String!]
  state: String!
  worker: Worker
}

type WorkerOnboardingPart {
  id: String!
  integration: WorkerOnboardingPartIntegration
  integrationConfigurations: JSON
  integrationObject: String!
  onboardingPart: OnboardingPart!
  state: String!
  workerId: String
  workerOnboarding: WorkerOnboarding!
}

"""Integration object from WorkerOnboardingPart"""
union WorkerOnboardingPartIntegration = GroupOnboardingPart | ResumeOnboarding | SpecialtyOnboarding | UserTermsOfService | WorkerReferenceOnboarding | WorkingPreferredLocationOnboarding

type WorkerReference {
  city: String
  company: Company
  contactEmail: String
  contactFirstName: String
  contactFullName: String
  contactLastName: String
  contactPhone: String
  createdAt: ISO8601DateTime
  facilityName: String
  id: String
  jobTitle: String
  refType: WorkerReferenceTypeEnum
  relationship: String
  salutation: WorkerReferenceSalutationEnum
  state: String
  workedFrom: ISO8601Date
  workedTo: ISO8601Date
  worker: Worker
}

type WorkerReferenceOnboarding {
  id: String!
  workerReferences: [WorkerReference!]
}

enum WorkerReferenceSalutationEnum {
  """Dr."""
  dr

  """Mr."""
  mr

  """Mrs."""
  mrs

  """Ms."""
  ms

  """Mx."""
  mx

  """None Preferred"""
  non_preferred

  """Professor"""
  professor
}

enum WorkerReferenceTypeEnum {
  """Current"""
  current

  """Former"""
  former
}

type WorkerSpecialty {
  category: String
  company: Company
  completedChecklist: Boolean
  id: String
  isPrimary: Boolean
  specialty: String
  specialtyId: String
  specialtyLongName: String
  worker: Worker
}

type WorkingPreferredLocation {
  id: String
  preferredWorkingCity: String
  preferredWorkingState: String
}

type WorkingPreferredLocationOnboarding {
  id: String!
  worker: Worker
  workingPreferredLocations: [WorkingPreferredLocation!]
}